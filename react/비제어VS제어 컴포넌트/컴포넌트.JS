제어컴포넌트 

// 쉽게 설명하자면, 사용자의 입력을 받는 컴포넌트에 event 객체를 이용해 setState()로 값을 저장하는 방식을 제어 컴포넌트 방식이라 할 수 있겠다. (위에서도 말했다 싶이 React에 의해 값이 제어되므로 제어 컴포넌트라고 부른다.)
//  제어 컴포넌트는 사용자가 입력한 값과 저장되는 값이 실시간으로 동기화된다.
export default function App() {
    const [input, setInput] = useState("");
    const onChange = (e) => {
      setInput(e.target.value);
    };
  
    return (
      <div className="App">
        <input onChange={onChange} />
      </div>
    );
  }


//   비제어 컴포넌트는 기존의 바닐라 자바스크립트와 크게 다르지 않은 방식이다. 
//   우리는 바닐라 자바스크립트를 사용할 때 폼을 제출할때 (submit button)을 클릭할 때 요소 내부의 값을 얻어왔다. 
//   비제어 컴포넌트 또한 이와 유사한 방식으로 사용된다.

// 비제어 컴포넌트 방식을 사용할 땐, 제어 컴포넌트 방식에서 사용한 setState()를 쓰지 않고 ref를 사용해서 값을 얻는다.



// 약간의 보너스: useRef와 리렌더링에 관해
// 그럼 왜 비제어 컴포넌트를 사용할 땐 useRef를 사용하고, 이러한 useRef는 왜 리렌더링을 발생시키지 않는걸까?


// useRef() 는 heap영역에 저장되는 일반적인 자바스크립트 객체이다.
// 매번 렌더링할 때 동일한 객체를 제공한다. heap에 저장되어 있기 때문에 어플리케이션이 종료되거나 가비지 컬렉팅될 때 까지, 참조할때마다 같은 메모리 값을 가진다고 할 수 있다.

// 값이 변경되어도 리렌더링이 되지 않는다. 같은 메모리 주소를 갖고있기 때문에 자바스크립트의 === 연산이 항상 true 를 반환한다.
//  즉 변경사항을 감지할 수 없어서 리렌더링을 하지 않는다는 뜻이다.